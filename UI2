import streamlit as st
import pandas as pd
import requests
import json
import matplotlib.pyplot as plt
import plotly.express as px
import networkx as nx
from textblob import TextBlob

# Azure OpenAI Configuration
AZURE_OPENAI_API_KEY = "your_azure_api_key"
AZURE_OPENAI_ENDPOINT = "https://<your-resource-name>.openai.azure.com/openai/deployments/gpt-35/completions?api-version=2023-09-15-preview"
AZURE_OPENAI_DEPLOYMENT_NAME = "gpt-35"

headers = {
    'Content-Type': 'application/json',
    'api-key': AZURE_OPENAI_API_KEY
}

# Load email data
emails_df = pd.read_csv('emails.csv')

# Streamlit App Layout Setup
st.set_page_config(layout="wide")
st.title("Email Analysis Dashboard with Azure GPT-35")

# 1. LLM Chatbot for Querying Emails
st.header("1. Chatbot for Email Queries")

user_query = st.text_input("Ask a question about your emails:")
if st.button("Ask"):
    if user_query:
        prompt = f"Answer the following question based on emails: {user_query}"
        data = {
            "prompt": prompt,
            "max_tokens": 100
        }
        response = requests.post(AZURE_OPENAI_ENDPOINT, headers=headers, data=json.dumps(data))
        if response.status_code == 200:
            result = response.json()['choices'][0]['text'].strip()
            st.write(result)
        else:
            st.error("Error with Azure OpenAI API request!")
    else:
        st.warning("Please enter a question!")

# 2. LLM-Based To-Do List
st.header("2. LLM-Based To-Do List")
todos = ["Follow up on project X", "Submit budget report", "Schedule meeting with team"]

completed = st.multiselect("Completed tasks:", todos)
st.write("Remaining tasks:")
for task in todos:
    if task not in completed:
        st.write(f"- {task}")

# 3. LLM-Based Reply Suggestions
st.header("3. LLM-Based Reply Suggestions")
if st.button("Generate Replies for Recent Emails"):
    recent_emails = emails_df.tail(10)
    for index, email in recent_emails.iterrows():
        prompt = f"Generate a reply to this email: {email['content']}"
        data = {
            "prompt": prompt,
            "max_tokens": 50
        }
        response = requests.post(AZURE_OPENAI_ENDPOINT, headers=headers, data=json.dumps(data))
        if response.status_code == 200:
            reply = response.json()['choices'][0]['text'].strip()
            st.write(f"**Email Subject**: {email['subject']}")
            st.write(f"**Suggested Reply**: {reply}")
        else:
            st.error("Error with Azure OpenAI API request!")

# 4. Histogram of Top Topics in the Last 10 Days
st.header("4. Top Topics in the Last 10 Days")
if st.button("Generate Topic Histogram"):
    last_10_days = emails_df[pd.to_datetime(emails_df['date']) >= (pd.Timestamp.now() - pd.Timedelta(days=10))]
    topics = ["project", "budget", "meeting"]  # Example keywords
    topic_counts = last_10_days['content'].apply(lambda text: [topic for topic in topics if topic in text.lower()])

    topic_histogram = pd.Series([item for sublist in topic_counts for item in sublist]).value_counts()
    fig = px.bar(topic_histogram, title="Top Topics in Last 10 Days")
    st.plotly_chart(fig)

# 5. Sentiment Analysis of Recent Emails
st.header("5. Sentiment Analysis from Emails")
if st.button("Analyze Sentiment"):
    last_10_days = emails_df[pd.to_datetime(emails_df['date']) >= (pd.Timestamp.now() - pd.Timedelta(days=10))]
    sentiment_scores = last_10_days['content'].apply(lambda text: TextBlob(text).sentiment.polarity)
    
    avg_sentiment = sentiment_scores.mean()
    sentiment_summary = "Positive" if avg_sentiment > 0 else "Negative" if avg_sentiment < 0 else "Neutral"
    st.write(f"Overall sentiment in the last 10 days: **{sentiment_summary}**")

# 6. Dynamic Graph of Email Communication Network
st.header("6. Email Communication Graph")
if st.button("Generate Communication Graph"):
    G = nx.Graph()

    for index, email in emails_df.iterrows():
        from_email = email['from']
        to_emails = email['to'].split(',')
        cc_emails = email.get('cc', '').split(',')
        bcc_emails = email.get('bcc', '').split(',')
        all_recipients = to_emails + cc_emails + bcc_emails

        for recipient in all_recipients:
            G.add_edge(from_email, recipient)

    plt.figure(figsize=(10, 8))
    pos = nx.spring_layout(G)
    nx.draw(G, pos, with_labels=True, node_color='skyblue', edge_color='gray', node_size=1500, font_size=10)
    st.pyplot(plt)
