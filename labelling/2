import streamlit as st
import pandas as pd
import json
import os

# File paths
DATA_FILE = "data.csv"  # Input file (CSV)
LABELED_DATA_FILE = "labeled_data.json"  # Saves labeled data
PROMPT_HISTORY_FILE = "prompt_versions.json"  # Stores prompt versions

# Dummy Prompts
DUMMY_PROMPTS = [
    "Identify if text is a complaint. If yes, extract sentences indicating complaint.",
    "Refined prompt v1",
    "Refined prompt v2"
]

# Initialize files if missing
def initialize_files():
    if not os.path.exists(LABELED_DATA_FILE):
        with open(LABELED_DATA_FILE, "w") as f:
            json.dump({}, f, indent=4)

    if not os.path.exists(PROMPT_HISTORY_FILE):
        with open(PROMPT_HISTORY_FILE, "w") as f:
            json.dump({"versions": DUMMY_PROMPTS}, f, indent=4)

    # If no CSV exists, create a dummy one
    if not os.path.exists(DATA_FILE):
        df = pd.DataFrame([
            {"text": "The service was terrible. I waited an hour before getting help. The product arrived broken.",
             "labels": "", "complaint_sentences": ""},
            {"text": "Thank you for the great support! It's been wonderful.", "labels": "", "complaint_sentences": ""},
            {"text": "I am disappointed with the delayed shipment. I want a refund.", "labels": "", "complaint_sentences": ""},
            {"text": "Is there an update on my issue? Still no response.", "labels": "", "complaint_sentences": ""},
            {"text": "The product arrived broken, and no one is responding to my emails.", "labels": "", "complaint_sentences": ""}
        ])
        df.to_csv(DATA_FILE, index=False)

# Load labeled data
def load_labeled_data():
    try:
        with open(LABELED_DATA_FILE, "r") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

# Save labeled data
def save_labeled_data(data):
    with open(LABELED_DATA_FILE, "w") as f:
        json.dump(data, f, indent=4)

# Load prompt versions
def load_prompt_versions():
    try:
        with open(PROMPT_HISTORY_FILE, "r") as f:
            return json.load(f)
    except FileNotFoundError:
        return {"versions": DUMMY_PROMPTS}

# Save new prompt version
def save_prompt_version(new_prompt):
    prompt_data = load_prompt_versions()
    prompt_data["versions"].append(new_prompt)
    with open(PROMPT_HISTORY_FILE, "w") as f:
        json.dump(prompt_data, f, indent=4)

# Get current prompt
def get_current_prompt():
    prompt_data = load_prompt_versions()
    return prompt_data["versions"][-1] if prompt_data["versions"] else "Default prompt"

# Load CSV Data
def load_data():
    return pd.read_csv(DATA_FILE)

# Save updated data to CSV
def save_data(df):
    df.to_csv(DATA_FILE, index=False)

# Function to simulate LLM prompt update
def update_prompt_with_llm(incorrect_labels):
    # Simulate LLM interaction for prompt refinement
    system_message = "Improve this prompt based on incorrect labels."
    user_message = f"Here are 5 incorrect labels: {incorrect_labels}. Suggest a refined prompt."
    new_prompt = "Updated prompt after analyzing incorrect labels."
    return new_prompt

# Streamlit UI
st.sidebar.title("Navigation")
page = st.sidebar.radio("Go to", ["Data Page", "Labeling Page", "Prompt Management"])

if page == "Data Page":
    st.title("Data Page")

    df = load_data()
    st.write(f"**Total Records:** {len(df)}")
    st.write(f"**Completed:** {df['labels'].apply(lambda x: bool(x.strip())).sum()}")
    st.write(f"**Pending:** {len(df) - df['labels'].apply(lambda x: bool(x.strip())).sum()}")

    st.write("### Full Data")
    st.write(df)

elif page == "Labeling Page":
    st.title("Labeling Page")

    df = load_data()

    # Show only unlabelled data
    pending_df = df[df["labels"].str.strip() == ""]
    if pending_df.empty:
        st.success("All records are labeled!")
    else:
        record_numbers = pending_df.index.tolist()
        selected_record = st.selectbox("Select Record", record_numbers)

        text = df.loc[selected_record, "text"]
        st.write(f"**Text:** {text}")

        # Get current prompt (for LLM input)
        current_prompt = get_current_prompt()
        st.write(f"**Current Prompt:** {current_prompt}")

        # Extract complaint sentences
        complaint_sentences = extract_complaint_sentences(text)
        extracted_complaints = ", ".join(complaint_sentences)
        st.write(f"**Extracted Complaint Sentences:** {extracted_complaints}")

        # User input for complaints (to accept or modify)
        user_complaints = st.text_area("Enter Complaint Sentences (comma separated)", value=extracted_complaints)

        if st.button("Save Label"):
            labeled_data = load_labeled_data()
            labeled_data[str(selected_record)] = {
                "text": text,
                "user_complaints": user_complaints.split(", "),
            }
            save_labeled_data(labeled_data)

            # Update CSV file with labels
            df.loc[selected_record, "complaint_sentences"] = user_complaints
            df.loc[selected_record, "labels"] = "Label Added"  # You can add the label status as needed
            save_data(df)

            st.success("Complaint sentences saved!")

            # Check for incorrect labels and collect them
            incorrect_labels = st.session_state.get("incorrect_labels", [])
            if extracted_complaints != user_complaints:
                incorrect_labels.append({
                    "text": text,
                    "extracted_complaints": extracted_complaints,
                    "user_complaints": user_complaints
                })
                st.session_state["incorrect_labels"] = incorrect_labels

            # If 5 incorrect labels, update prompt
            if len(incorrect_labels) >= 5:
                new_prompt = update_prompt_with_llm(incorrect_labels)
                save_prompt_version(new_prompt)
                st.success("Prompt updated!")
                st.session_state["incorrect_labels"] = []

elif page == "Prompt Management":
    st.title("Prompt Management")

    current_prompt = get_current_prompt()
    st.write(f"**Current Prompt:** {current_prompt}")

    if st.button("Revert to Previous Prompt"):
        prompt_data = load_prompt_versions()
        if len(prompt_data["versions"]) > 1:
            new_prompt = prompt_data["versions"][-2]  # Revert to previous
            save_prompt_version(new_prompt)
            st.success("Prompt reverted!")
        else:
            st.warning("No previous version available.")

# Initialize files on first run
initialize_files()

