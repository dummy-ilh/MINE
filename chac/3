import re
import pandas as pd

def extract_email_details(email_text):
    """
    Extracts 'From', 'To', 'Sent', 'Subject', and 'Body' from an email thread.
    Handles missing fields, case insensitivity, and prevents incorrect splitting on "On ... wrote:".
    """
    if not isinstance(email_text, str) or email_text.strip() == "":
        return {"From": None, "To": None, "Sent": None, "Subject": None, "Body": None}

    # Standardize newlines & remove extra spaces
    email_text = re.sub(r'\r\n|\r', '\n', email_text).strip()

    # Ensure "From: " is at the start of a new line to avoid splitting on "On ..."
    email_parts = re.split(r'(?m)^\s*From:\s', email_text)  # Multi-line safe split
    extracted_emails = []

    for i, email in enumerate(email_parts):
        email = email.strip()
        if not email:
            continue

        # Extract Fields
        from_match = re.search(r'^(.*?)(?=\n)', email, re.IGNORECASE)
        from_email = from_match.group(1).strip() if from_match else None

        to_match = re.search(r'(?i)To:\s*(.+)', email)
        to_email = to_match.group(1).strip() if to_match else None

        sent_match = re.search(r'(?i)Sent:\s*(.+)', email)
        sent_time = sent_match.group(1).strip() if sent_match else None

        subject_match = re.search(r'(?i)Sub(?:ject)?:\s*(.+)', email)
        subject = subject_match.group(1).strip() if subject_match else None

        # Identify Body (Everything after Subject until Signature)
        body_start = subject_match.end() if subject_match else 0
        body = email[body_start:].strip()

        # Remove any quoted email replies ("On ... wrote:")
        body = re.split(r'(?i)^On .*? wrote:', body, maxsplit=1)[0].strip()

        # Signature Detection (Scan from bottom)
        signature_match = re.search(r'(?i)(Best regards,|Thanks,|Sincerely,)', body)
        if signature_match:
            body = body[:signature_match.start()].strip()

        extracted_emails.append({
            "From": from_email,
            "To": to_email,
            "Sent": sent_time,
            "Subject": subject,
            "Body": body
        })

    # Handle missing 'From' fields (Infer from next email)
    for i in range(len(extracted_emails) - 1):
        if not extracted_emails[i]["From"]:
            extracted_emails[i]["From"] = extracted_emails[i+1]["To"]
        if not extracted_emails[i]["To"]:
            extracted_emails[i]["To"] = extracted_emails[i+1]["From"]

    return extracted_emails[0] if extracted_emails else {"From": None, "To": None, "Sent": None, "Subject": None, "Body": None}

# Load DataFrame (Assume df exists)
df = pd.read_csv("your_file.csv")  # Replace with actual file if needed

# Apply extraction function to 'Message content'
email_details = df["Message content"].apply(extract_email_details).apply(pd.Series)

# Merge extracted details with the original df
df = pd.concat([df, email_details], axis=1)

# Save to CSV or print
df.to_csv("parsed_emails.csv", index=False)
print(df.head())
