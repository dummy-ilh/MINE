import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import CountVectorizer
import math

# Sample dataset
data = {
    'text': [
        'This is a good movie', 
        'I did not like the movie', 
        'What a great experience', 
        'It was a bad movie', 
        'The movie was awesome',
        'I will not recommend it',
        'Fantastic direction and acting',
        'Horrible plot and bad acting'
    ],
    'label': [True, False, True, False, True, False, True, False]
}

# Convert to DataFrame
df = pd.DataFrame(data)

# Step 1: Vectorize the text data to get word counts
vectorizer = CountVectorizer()
X = vectorizer.fit_transform(df['text'])
word_counts = pd.DataFrame(X.toarray(), columns=vectorizer.get_feature_names_out())

# Add label to the DataFrame
word_counts['label'] = df['label']

# Step 2: Calculate the total number of positive and negative samples
total_true = len(df[df['label'] == True])
total_false = len(df[df['label'] == False])

# Step 3: Calculate word frequencies for each class
def calc_word_frequencies(word_counts, word):
    # Number of times the word appears in True and False labels
    true_count = word_counts[word][word_counts['label'] == True].sum()
    false_count = word_counts[word][word_counts['label'] == False].sum()
    
    # Calculate proportions
    true_prop = true_count / total_true if total_true != 0 else 0
    false_prop = false_count / total_false if total_false != 0 else 0
    
    return true_prop, false_prop

# Step 4: Calculate Information Value (IV) for each word
def calc_iv(true_prop, false_prop):
    if true_prop == 0 or false_prop == 0:
        return 0
    woe = math.log(true_prop / false_prop)
    iv = (true_prop - false_prop) * woe
    return iv

# Calculate IV for each word
iv_values = {}
for word in vectorizer.get_feature_names_out():
    true_prop, false_prop = calc_word_frequencies(word_counts, word)
    iv = calc_iv(true_prop, false_prop)
    iv_values[word] = iv

# Convert to DataFrame for better readability
iv_df = pd.DataFrame(list(iv_values.items()), columns=['Word', 'IV']).sort_values(by='IV', ascending=False)

print(iv_df)
_______________

# Assuming you have a model and you've already made predictions
# Example predictions:
# y_true: Actual labels
# y_pred: Model predictions

y_true = [True, False, True, False, True, False, True, False]
y_pred = [True, False, True, True, False, False, True, False]  # Some wrong predictions

# Create a DataFrame with the original text, true labels, and predictions
df['predicted'] = y_pred

# Add a column to mark correct or incorrect predictions
df['correct'] = df['label'] == df['predicted']

# Step 1: Vectorize the text data again to get word counts
X = vectorizer.transform(df['text'])  # Use the same vectorizer as before
word_counts = pd.DataFrame(X.toarray(), columns=vectorizer.get_feature_names_out())

# Add 'correct' to the DataFrame
word_counts['correct'] = df['correct']

# Step 2: Calculate the number of correct and incorrect samples
total_correct = len(df[df['correct'] == True])
total_incorrect = len(df[df['correct'] == False])

# Step 3: Calculate word frequencies for correct and incorrect predictions
def calc_word_frequencies(word_counts, word):
    correct_count = word_counts[word][word_counts['correct'] == True].sum()
    incorrect_count = word_counts[word][word_counts['correct'] == False].sum()
    
    correct_prop = correct_count / total_correct if total_correct != 0 else 0
    incorrect_prop = incorrect_count / total_incorrect if total_incorrect != 0 else 0
    
    return correct_prop, incorrect_prop

# Step 4: Calculate IV for each word
def calc_iv(correct_prop, incorrect_prop):
    if correct_prop == 0 or incorrect_prop == 0:
        return 0
    woe = math.log(correct_prop / incorrect_prop)
    iv = (correct_prop - incorrect_prop) * woe
    return iv

# Calculate IV for each word
iv_values = {}
for word in vectorizer.get_feature_names_out():
    correct_prop, incorrect_prop = calc_word_frequencies(word_counts, word)
    iv = calc_iv(correct_prop, incorrect_prop)
    iv_values[word] = iv

# Convert to DataFrame for better readability
iv_df = pd.DataFrame(list(iv_values.items()), columns=['Word', 'IV']).sort_values(by='IV', ascending=False)

print(iv_df)
