import streamlit as st
from langchain.chat_models import AzureChatOpenAI
import pandas as pd
import random
import matplotlib.pyplot as plt
import networkx as nx

# Initialize LLM
llm = AzureChatOpenAI(deployment_name="gpt-35-turbo", model_name="gpt-35-turbo")

# Function to generate random email data
def generate_dummy_emails(num_emails=50):
    senders = ["client1@company.com", "legal@corp.com", "hr@company.com", "client2@company.com", "it@company.com", "finance@corp.com", "marketing@company.com"]
    subjects = ["Service Complaint", "Monthly Report", "PII Breach Notice", "Meeting Request", "Update on Project", "Invoice Due", "Security Alert"]
    contents = [
        "I am dissatisfied with the service provided...",
        "Please find attached the monthly report for your review...",
        "We have detected a PII breach and need to address the issue immediately...",
        "Can we schedule a meeting to discuss the project?",
        "This is an update on the ongoing project...",
        "Please pay the attached invoice before the due date...",
        "A security alert has been triggered. Please review immediately."
    ]
    statuses = ["unread", "read", "flagged", "unread", "read", "flagged"]

    data = {
        "Sender": [random.choice(senders) for _ in range(num_emails)],
        "Subject": [random.choice(subjects) for _ in range(num_emails)],
        "Content": [random.choice(contents) for _ in range(num_emails)],
        "Status": [random.choice(statuses) for _ in range(num_emails)]
    }
    return pd.DataFrame(data)

# Generate 50 dummy emails
inbox_data = generate_dummy_emails(50)

sent_data = pd.DataFrame({
    "Recipient": ["client1@company.com", "legal@corp.com", "hr@company.com", "client2@company.com"],
    "Subject": ["Response to Complaint", "Follow-up on legal matters", "Addressing PII issues", "Feedback Acknowledgment"],
    "Content": ["We are looking into...", "Further clarification...", "We have resolved...", "Thank you for your feedback..."],
})

# Insights Identification
def identify_violations(data):
    complaints = data[data['Subject'].str.contains("Complaint", case=False)]
    pii_issues = data[data['Content'].str.contains("PII", case=False)]
    return complaints, pii_issues

complaints, pii_issues = identify_violations(inbox_data)

# Function to create a bidirectional graph
def create_graph():
    G = nx.DiGraph()
    edges = [("Client1", "You"), ("You", "Client1"), 
             ("Legal", "You"), ("You", "Legal"), 
             ("HR", "You"), ("You", "HR"), 
             ("Client2", "You"), ("You", "Client2")]
    G.add_edges_from(edges)
    return G

# Function to get todo list from LLM
def get_todo_list(inbox, sent):
    # Dummy LLM call - replace with actual LLM function
    todos = ["Reply to Client1", "Follow-up with HR on PII", "Send legal update"]
    completed = ["Sent response to Client1"]
    return todos, completed

# Generate todo list and completed items using LLM
todo_list, completed_list = get_todo_list(inbox_data, sent_data)

# Custom CSS for UI styling
st.markdown("""
    <style>
    .stColumn { background-color: #f5f5f5; border-radius: 10px; padding: 10px; margin: 10px; }
    .scrollable-todo { height: 300px; overflow-y: auto; padding: 10px; border: 1px solid #ccc; border-radius: 5px; background-color: #ffffff; }
    .st-header { font-size: 24px; color: #0078D4; font-weight: bold; text-align: center; margin-bottom: 10px; }
    .completed-task { color: green; }
    .graph-container { text-align: center; margin-top: 10px; }
    </style>
""", unsafe_allow_html=True)

# App Layout
st.set_page_config(layout="wide")
st.title("Inbox Insights with Dummy Emails")

# First Column - Todo List
with st.container():
    col1, col2, col3 = st.columns(3)

    # Column 1: Todo List
    with col1:
        st.markdown('<div class="st-header">Todo List</div>', unsafe_allow_html=True)
        # Scrollable todo list area
        st.markdown('<div class="scrollable-todo">', unsafe_allow_html=True)
        for todo in todo_list:
            if st.checkbox(todo):
                completed_list.append(todo)
        st.markdown('</div>', unsafe_allow_html=True)

        # Recently completed tasks
        st.write("### Recently Completed")
        if completed_list:
            for completed in completed_list:
                st.markdown(f"<p class='completed-task'>- {completed}</p>", unsafe_allow_html=True)

    # Column 2: Insights and Mails to Send
    with col2:
        st.markdown('<div class="st-header">Insights from Last Month</div>', unsafe_allow_html=True)
        st.write(f"Complaints: {len(complaints)}")
        st.write(f"PII Issues: {len(pii_issues)}")

        # Display Complaints and PII issues
        st.write("### Complaints Identified")
        st.dataframe(complaints[["Sender", "Subject", "Content"]])

        st.write("### PII Issues Identified")
        st.dataframe(pii_issues[["Sender", "Subject", "Content"]])

        # Mails to Send
        st.write("### Mails to Send")
        for mail in sent_data['Recipient']:
            st.write(f"- {mail}")

    # Column 3: Bidirectional Graph of Messages
    with col3:
        st.markdown('<div class="st-header">Message Graph</div>', unsafe_allow_html=True)
        G = create_graph()

        fig, ax = plt.subplots()
        pos = nx.spring_layout(G)
        nx.draw(G, pos, with_labels=True, ax=ax, node_color="skyblue", node_size=3000, arrows=True)
        
        # Graph container with centered content
        st.markdown('<div class="graph-container">', unsafe_allow_html=True)
        st.pyplot(fig)
        st.markdown('</div>', unsafe_allow_html=True)
