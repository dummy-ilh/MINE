import pandas as pd
import random
from datetime import datetime, timedelta

# Helper function to generate random dates
def random_date(start, end):
    return start + timedelta(days=random.randint(0, int((end - start).days)))

# Realistic participant names
participants = [
    "James Smith", "Linda Johnson", "David Miller", "Sarah Williams", 
    "Michael Brown", "Elizabeth Davis", "John Doe", "Anna Moore", 
    "Peter Clark", "Nancy Garcia", "Lucas Martin", "Emma Taylor"
]

# Longer, detailed email conversations
conversations = [
    [
        "Hi Linda,\n\nI wanted to check in on the progress with Jira updates. We need to have all the pending tasks completed before the client review next week. Could you update Jira by Friday?\n\nThanks,\nJames",
        "Hi James,\n\nI’m working on it, but I’m waiting on the final reports from Sarah. Once I have them, I’ll be able to complete the updates. Should be done by Friday if I get the reports soon.\n\nBest,\nLinda",
        "Hi Sarah,\n\nCan you send the reports to Linda? We need to get this wrapped up before the client review.\n\nThanks,\nJames",
        "Hi James and Linda,\n\nSorry for the delay. I’ve attached the final reports. Please let me know if you need anything else.\n\nBest,\nSarah",
        "Hi Sarah,\n\nThanks for the report. Linda, can you confirm once Jira is updated?\n\nBest,\nJames",
        "Hi James,\n\nJira has been updated with the final information from Sarah. We are good to go for the client review.\n\nBest,\nLinda",
        "Hi Linda, Sarah,\n\nGreat! Thanks for getting this done. We’re all set for the review.\n\nBest,\nJames"
    ],
    [
        "Hi team,\n\nWe need to schedule a follow-up meeting with the client to discuss the project’s next steps. How does next Wednesday at 2 PM sound?\n\nBest,\nDavid",
        "Hi David,\n\nThat time works for me. Thanks for setting this up.\n\nBest,\nAnna",
        "Hi team,\n\nNext Wednesday at 2 PM works for me as well. Looking forward to the meeting.\n\nCheers,\nLucas",
        "Hi David,\n\nCan we move the time to 3 PM? I have another meeting at 2 PM.\n\nBest,\nLinda",
        "Hi team,\n\n3 PM works for me too. Let’s lock it in.\n\nCheers,\nLucas",
        "Hi David,\n\n3 PM works for me as well. Thanks.\n\nBest,\nAnna",
        "Hi all,\n\nThe meeting is confirmed for next Wednesday at 3 PM. I’ll send out the calendar invite shortly.\n\nBest,\nDavid"
    ],
    [
        "Hi Michael,\n\nI’ve reviewed the Q3 budget and noticed that we’ve increased spending on digital marketing by 15%. While I understand the rationale, do you think we could reallocate some of that budget to R&D? Digital has seen diminishing returns recently.\n\nBest,\nPeter",
        "Hi Peter,\n\nI agree that we should consider reallocating some of the budget. Maybe reduce digital to a 10% increase and shift the difference to R&D? Let’s discuss this in more detail at our next meeting.\n\nBest,\nMichael",
        "Hi Michael,\n\nThat makes sense. I’ll draft the revised budget and share it before the meeting for review. Thanks for the suggestion.\n\nBest,\nPeter",
        "Hi Peter,\n\nSounds good. Looking forward to seeing the revised budget.\n\nBest,\nMichael",
        "Hi Michael,\n\nI’ve attached the revised budget. Please review it and let me know if it looks good. We can discuss it during the meeting.\n\nBest,\nPeter",
        "Hi Peter,\n\nThe revised budget looks good. Let’s move forward with this allocation. I’ll update the team accordingly.\n\nBest,\nMichael",
        "Hi team,\n\nJust a quick update—the budget has been revised as per the discussion with Michael. We’ll finalize the allocation during the meeting.\n\nBest,\nPeter"
    ],
    [
        "Hi team,\n\nI wanted to get your input on the new client onboarding process. There have been some delays in the handoff between sales and customer success. What are your thoughts on how we can streamline this process?\n\nBest,\nJohn",
        "Hi John,\n\nI think one of the key issues is the lack of documentation during the handoff. If sales could provide more detailed information upfront, it would make the transition smoother.\n\nBest,\nEmma",
        "Hi team,\n\nI agree with Emma. Also, perhaps we could set up a quick kickoff call between sales and customer success for high-priority clients. That would help align expectations early on.\n\nCheers,\nLucas",
        "Hi Emma, Lucas,\n\nThose are great suggestions. I’ll speak to the sales team about improving documentation and setting up calls for priority clients. Any other thoughts?\n\nBest,\nJohn",
        "Hi John,\n\nI think we also need to improve our internal tracking system for client onboarding. It’s difficult to track where each client is in the process right now.\n\nBest,\nNancy",
        "Hi team,\n\nGreat point, Nancy. I’ll look into improving our internal tracking system. Let’s follow up on this during our next meeting.\n\nBest,\nJohn",
        "Hi all,\n\nThanks for the input. I’ll circulate the new onboarding process draft by the end of the week for review.\n\nBest,\nJohn"
    ]
]

subjects = [
    "Jira Update Request", "Follow-up Meeting with Client", "Q3 Budget Review", 
    "Client Onboarding Process Improvement"
]

# Generate the dummy dataset with 10 threads, each having 7-8 emails
start_date = datetime(2023, 8, 1)
end_date = datetime(2023, 9, 30)

email_data = []

for i, subject in enumerate(subjects):
    conversation = conversations[i]
    num_emails = len(conversation)
    for j in range(num_emails):
        from_participant = random.choice(participants)
        to_participant = random.choice([p for p in participants if p != from_participant])
        date = random_date(start_date, end_date)
        
        email_data.append({
            "subject": subject,
            "date": date.strftime("%Y-%m-%d"),
            "from": from_participant,
            "to": to_participant,
            "cc": random.choice([random.choice(participants) if random.random() > 0.5 else None]),
            "bcc": random.choice([random.choice(participants) if random.random() > 0.7 else None]),
            "body": conversation[j]
        })

# Convert the list into a DataFrame
df = pd.DataFrame(email_data)

# Display the first 20 emails as an example
print(df.head(20))
_________

from langchain.prompts import PromptTemplate
from langchain.llms import OpenAI
import networkx as nx
import matplotlib.pyplot as plt

# Langchain prompt template to summarize each email thread
template = """
Summarize the following email thread in one concise sentence, focusing on the key agreements made:
{conversation}
"""

# Initialize the LLM and the prompt template
llm = OpenAI()  # Use OpenAI LLM
prompt = PromptTemplate(input_variables=["conversation"], template=template)

# Function to summarize conversations
def summarize_conversation(conversation):
    summary_prompt = prompt.format(conversation=conversation)
    summary = llm.generate(summary_prompt)
    return summary

# Step 2: Create a graph using networkx
G = nx.DiGraph()

# Step 3: Loop over each subject thread and summarize
for subject in df['subject'].unique():
    thread_df = df[df['subject'] == subject]
    conversation = "\n".join(thread_df['body'].tolist())  # Combine emails into one conversation
    summary = summarize_conversation(conversation)
    
    # Add nodes and edges to the graph
    for i, row in thread_df.iterrows():
        G.add_node(i, label=summary, participant=row['from'])
        if i > 0:
            prev_date = thread_df.iloc[i-1]['date']
            G.add_edge(i-1, i, date=row['date'], color=row['from'])

# Step 4: Visualize the graph
colors = [G.nodes[n]['participant'] for n in G.nodes]
labels = nx.get_node_attributes(G, 'label')
edges = G.edges(data=True)

# Create a color map for participants
color_map = {participant: plt.cm.tab20(i) for i, participant in enumerate(participants)}
node_colors = [color_map[G.nodes[n]['participant']] for n in G.nodes]

