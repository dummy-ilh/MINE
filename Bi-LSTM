for index, row in df_hyperparameters.iterrows():
    # Create the model using the current hyperparameter configuration
    inputs = keras.Input(shape=(None,), dtype="int32")
    x = layers.Embedding(max_features, row["embedding_dim"])(inputs)
    x = layers.Bidirectional(layers.LSTM(row["lstm_units"], return_sequences=True))(x)
    x = layers.Bidirectional(layers.LSTM(row["lstm_units"]))(x)
    outputs = layers.Dense(1, activation="sigmoid")(x)
    model = keras.Model(inputs, outputs)

    # Compile and fit the model on the training data
    model.compile(optimizer="adam", loss="binary_crossentropy", metrics=["accuracy", keras.metrics.Recall()])
    model.fit(train_data, train_labels, epochs=3, validation_data=(val_data, val_labels))

    # Evaluate the model on the validation and test datasets
    val_result = model.evaluate(val_data, val_labels)
    test_result = model.evaluate(test_data, test_labels)

    # Store results in the DataFrame
    result_row = {
        "embedding_dim": row["embedding_dim"],
        "lstm_units": row["lstm_units"],
        "validation_accuracy": val_result[1],
        "test_accuracy": test_result[1],
        "validation_recall": val_result[2],
        "test_recall": test_result[2]
    }
    df_results = df_results.append(result_row, ignore_index=True)
