# save this in a file named my_module.py
import pickle

def load_model_and_predict(pkl_file, input_data):
    with open(pkl_file, 'rb') as f:
        model = pickle.load(f)
    return model.predict(input_data)



# save this in a file named test_my_module.py
import unittest
from unittest import mock
from unittest.mock import MagicMock
from my_module import load_model_and_predict

class TestLoadModelAndPredict(unittest.TestCase):
    @mock.patch('my_module.pickle.load')
    @mock.patch('builtins.open', new_callable=mock.mock_open)
    def test_load_model_and_predict(self, mock_open, mock_pickle_load):
        # Mock model with a predict method
        mock_model = MagicMock()
        mock_model.predict.return_value = 'mocked prediction'
        
        # Configure the mock to return the mock model
        mock_pickle_load.return_value = mock_model
        
        # Define the input data and the pickle file name
        input_data = [1, 2, 3]
        pkl_file = 'fake_model.pkl'
        
        # Call the function under test
        result = load_model_and_predict(pkl_file, input_data)
        
        # Assert the predict method was called with the correct input data
        mock_model.predict.assert_called_once_with(input_data)
        
        # Assert the function returns the mocked prediction
        self.assertEqual(result, 'mocked prediction')
        
        # Ensure the file was opened correctly
        mock_open.assert_called_once_with(pkl_file, 'rb')
        
if __name__ == '__main__':
    unittest.main()
