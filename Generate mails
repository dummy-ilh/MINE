import pandas as pd
import random
from datetime import datetime, timedelta

# Helper function to generate random dates
def random_date(start, end):
    return start + timedelta(days=random.randint(0, int((end - start).days)))

# Define start and end dates between August 15 and September 30, 2023
start_date = datetime(2023, 8, 15)
end_date = datetime(2023, 9, 30)

# Lists for random generation of email data
subjects = [
    "Budget Discussion", "Meeting Follow-up", "Investment Proposal Review", 
    "Q2 Performance Report", "Projected Interest Rates", "Upcoming Meeting Agenda",
    "Client Investment Query", "Follow-up on Investment Plan", "New Strategy Proposal",
    "Approval Required for New Deal", "Investment Analysis: Your Feedback Needed",
    "Conversation End: Final Thoughts", "Request for Financial Projections", 
    "URGENT: Client Issue", "Team Project Status", "Revised Financials",
    "IT Shutdown Notification", "Newsletter: Market Insights", "Hackathon Registration",
    "Employee Training: Financial Analysis Tools", "System Maintenance Announcement"
]

actions_in_body = [
    "Please let me know the projected interest rate for the upcoming quarter.",
    "Can you review the attached investment proposal and provide your thoughts?",
    "We need your feedback on the new strategy proposal before proceeding.",
    "Could you send me the Q2 performance report for our client?",
    "Let me know if you approve the deal terms by EOD.",
    "Please ensure the document is reviewed and sent to the client by tomorrow.",
    "Action required: Confirm attendance for the meeting next Monday.",
]

generic_replies = [
    "Thank you for your response. I will review it and get back to you shortly.",
    "Noted, I will take a look at this and let you know if I have any questions.",
    "Got it, thanks for the heads up!",
    "This looks good, thanks for the update.",
    "I'll check in with the team and follow up with you tomorrow.",
]

conversation_enders = [
    "I believe this concludes our discussion. Thanks for your time.",
    "If there’s nothing else, we can consider this matter closed.",
    "Looking forward to working with you on this. Let's close this deal!",
    "Thanks again for your input, we’re all set now.",
]

email_addresses = [
    "james.smith@vpm.com", "linda.johnson@vpm.com", "david.miller@vpm.com",
    "sarah.williams@investwell.com", "michael.brown@capitalgroup.com",
    "elizabeth.davis@vpm.com", "john.doe@vpm.com", "anna.moore@equityadvisors.com",
    "peter.clark@vpm.com", "nancy.garcia@financegroup.com"
]

email_threads = [
    "Re: Investment Proposal Review", "Re: Q2 Performance Report", 
    "Re: Client Investment Query", "Re: Approval Required for New Deal", 
    "Re: Request for Financial Projections"
]

# Generate longer emails >500 words
def generate_long_email():
    body = (
        "Dear Team,\n\n"
        "I hope this email finds you well. I wanted to follow up on the discussion we had last week regarding the "
        "investment proposal and the projected interest rates for the upcoming quarter. I’ve gone over the details "
        "of the proposal and have a few thoughts to share.\n\n"
        "First, it’s critical that we carefully evaluate the underlying assumptions regarding the market trends, "
        "especially considering the volatility we’ve seen recently in global markets. We need to ensure our estimates "
        "for the projected returns are in line with the risk appetite of the client. Additionally, I would like to suggest "
        "we consider an alternative hedging strategy that could help mitigate potential downside risks. \n\n"
        "Secondly, regarding the budget allocation for Q2, I’ve noticed that we may be over-allocating resources to "
        "certain areas of the portfolio. It might be worthwhile to revisit our allocation strategy, particularly in sectors "
        "that have shown underperformance in the last quarter. We should redirect more resources towards high-growth "
        "sectors like tech and green energy. \n\n"
        "Finally, I would like everyone’s input on the revised strategy proposal before our meeting on Friday. Please "
        "review the attached documents and provide your feedback by EOD tomorrow.\n\n"
        "Looking forward to your thoughts.\n\nBest regards,\nJames"
    )
    return body

# Generate the email dataset
emails = []

for i in range(500):
    date = random_date(start_date, end_date).strftime("%Y-%m-%d")
    subject = random.choice(subjects)
    from_email = random.choice(email_addresses)
    to_email = random.choice([email for email in email_addresses if email != from_email])
    cc_email = random.choice([random.choice(email_addresses) if random.random() > 0.7 else None])
    bcc_email = random.choice([random.choice(email_addresses) if random.random() > 0.9 else None])
    
    # Determine if this is a long email (30% chance)
    if random.random() < 0.3:
        body = generate_long_email()
    else:
        if random.random() > 0.8:  # Action item email
            body = random.choice(actions_in_body)
        elif random.random() > 0.7:  # Generic reply
            body = random.choice(generic_replies)
        elif random.random() > 0.6:  # Conversation ender
            body = random.choice(conversation_enders)
        elif random.random() > 0.5:  # Long thread email
            subject = random.choice(email_threads)
            body = f"In response to your earlier message, {random.choice(actions_in_body)}"
        else:
            body = "Please let me know if you have any further questions or concerns."

    # Add the email to the list
    emails.append({
        "date": date,
        "subject": subject,
        "body": body,
        "to": to_email,
        "from": from_email,
        "cc": cc_email if cc_email else "",
        "bcc": bcc_email if bcc_email else ""
    })

# Convert the list of emails to a pandas DataFrame
df = pd.DataFrame(emails)

# Save the emails to a CSV file
df.to_csv("investment_banker_emails.csv", index=False)

print("Email dataset generated with 500 entries.")
