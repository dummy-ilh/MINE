# save this in a file named api.py
from flask import Flask, request, jsonify
import pickle

app = Flask(__name__)

# Keep-alive endpoint
@app.route('/keep_alive', methods=['GET'])
def keep_alive():
    return jsonify({"status": "alive"}), 200

# Prediction endpoint
@app.route('/predict', methods=['POST'])
def predict():
    data = request.get_json()
    model = load_model('model.pkl')
    prediction = model.predict(data['input'])
    return jsonify({"prediction": prediction}), 200

def load_model(pkl_file):
    with open(pkl_file, 'rb') as f:
        model = pickle.load(f)
    return model

if __name__ == '__main__':
    app.run(debug=True)
-----------------------


# save this in a file named test_api.py
import unittest
from unittest import mock
from unittest.mock import MagicMock
from api import app

class TestAPI(unittest.TestCase):
    def setUp(self):
        self.app = app.test_client()
        self.app.testing = True
    
    @mock.patch('api.load_model')
    def test_keep_alive(self, mock_load_model):
        response = self.app.get('/keep_alive')
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.json, {"status": "alive"})
    
    @mock.patch('api.load_model')
    def test_predict(self, mock_load_model):
        # Mock model with a predict method
        mock_model = MagicMock()
        mock_model.predict.return_value = 'mocked prediction'
        
        # Configure the mock to return the mock model
        mock_load_model.return_value = mock_model
        
        # Define the input data
        input_data = {'input': [1, 2, 3]}
        
        # Call the prediction endpoint
        response = self.app.post('/predict', json=input_data)
        
        # Assert the predict method was called with the correct input data
        mock_model.predict.assert_called_once_with(input_data['input'])
        
        # Assert the function returns the mocked prediction
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.json, {"prediction": 'mocked prediction'})
    
if __name__ == '__main__':
    unittest.main()
